name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: sagenkoder/go-openapi-exploration-mcp-server

jobs:
  # Build executables using cross-compilation on a single runner
  build-executables:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      
      - name: Build all executables
        run: |
          # Create output directory
          mkdir -p dist
          
          # Build all modes for all architectures
          for mode in stdio http interactive; do
            for arch in amd64 arm64; do
              echo "Building openapi-mcp-${mode} for linux/${arch}..."
              GOOS=linux GOARCH=${arch} go build -ldflags="-s -w" \
                -o dist/openapi-mcp-${mode}-linux-${arch} \
                ./cmd/openapi-mcp-${mode}
            done
          done
          
          # Create checksums
          cd dist
          sha256sum openapi-mcp-* > checksums.txt
          cd ..
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: executables
          path: dist/*

  # Build Docker images on native AMD64 runner
  build-docker-amd64:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push AMD64 images
        run: |
          for mode in stdio http interactive; do
            echo "Building ${mode} for linux/amd64..."
            docker build --build-arg MODE=${mode} \
              -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${mode}-linux-amd64 \
              -f Dockerfile .
            
            if [[ "${{ github.event_name }}" != "pull_request" ]]; then
              docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${mode}-linux-amd64
            fi
          done

  # Build Docker images using QEMU for ARM64
  build-docker-arm64:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push ARM64 images
        run: |
          # Install qemu-user-static for cross-platform builds
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          
          for mode in stdio http interactive; do
            echo "Building ${mode} for linux/arm64..."
            docker build --platform linux/arm64 --build-arg MODE=${mode} \
              -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${mode}-linux-arm64 \
              -f Dockerfile .
            
            if [[ "${{ github.event_name }}" != "pull_request" ]]; then
              docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${mode}-linux-arm64
            fi
          done

  # Create multi-arch manifests
  create-manifests:
    needs: [build-docker-amd64, build-docker-arm64]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create and push multi-arch manifests
        run: |
          # Create manifests for each mode
          for mode in stdio http interactive; do
            docker manifest create \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${mode} \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${mode}-linux-amd64 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${mode}-linux-arm64
            
            docker manifest annotate \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${mode} \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${mode}-linux-amd64 \
              --os linux --arch amd64
            
            docker manifest annotate \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${mode} \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${mode}-linux-arm64 \
              --os linux --arch arm64
            
            docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${mode}
          done
          
          # Create latest manifest (stdio)
          docker manifest create \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stdio-linux-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stdio-linux-arm64
          
          docker manifest annotate \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stdio-linux-amd64 \
            --os linux --arch amd64
          
          docker manifest annotate \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stdio-linux-arm64 \
            --os linux --arch arm64
          
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  # Create GitHub release
  create-release:
    needs: [build-executables, create-manifests]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: executables
          path: dist
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          generate_release_notes: true
          body: |
            ## üöÄ OpenAPI MCP Server Release
            
            ### üì¶ Executables
            
            #### Linux AMD64
            - `openapi-mcp-stdio-linux-amd64` - Standard MCP stdio mode
            - `openapi-mcp-http-linux-amd64` - HTTP server mode  
            - `openapi-mcp-interactive-linux-amd64` - Interactive CLI mode
            
            #### Linux ARM64
            - `openapi-mcp-stdio-linux-arm64` - Standard MCP stdio mode
            - `openapi-mcp-http-linux-arm64` - HTTP server mode
            - `openapi-mcp-interactive-linux-arm64` - Interactive CLI mode
            
            ### üê≥ Docker Images
            
            #### Multi-architecture images (linux/amd64, linux/arm64):
            ```bash
            # Latest (stdio mode)
            docker pull ghcr.io/sagenkoder/go-openapi-exploration-mcp-server:latest
            
            # Specific modes
            docker pull ghcr.io/sagenkoder/go-openapi-exploration-mcp-server:stdio
            docker pull ghcr.io/sagenkoder/go-openapi-exploration-mcp-server:http
            docker pull ghcr.io/sagenkoder/go-openapi-exploration-mcp-server:interactive
            ```
            
            #### Architecture-specific images:
            ```bash
            # AMD64
            docker pull ghcr.io/sagenkoder/go-openapi-exploration-mcp-server:stdio-linux-amd64
            docker pull ghcr.io/sagenkoder/go-openapi-exploration-mcp-server:http-linux-amd64
            docker pull ghcr.io/sagenkoder/go-openapi-exploration-mcp-server:interactive-linux-amd64
            
            # ARM64  
            docker pull ghcr.io/sagenkoder/go-openapi-exploration-mcp-server:stdio-linux-arm64
            docker pull ghcr.io/sagenkoder/go-openapi-exploration-mcp-server:http-linux-arm64
            docker pull ghcr.io/sagenkoder/go-openapi-exploration-mcp-server:interactive-linux-arm64
            ```
            
            ### üìù Checksums
            SHA256 checksums are available in `checksums.txt`